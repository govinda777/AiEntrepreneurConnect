import openai
import os
import re
import requests
from datetime import datetime, timedelta
from dotenv import load_dotenv

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

def test_prompt(client):
    try:
        model = os.environ.get("OPENAI_MODEL", "gpt-4o-mini")
        print(f"\nüîé Testando envio de prompt para o modelo {model}...")
        response = client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": "Diga 'Ol√°, mundo!'"}],
            max_tokens=10
        )
        reply = response.choices[0].message.content.strip()
        print(f"Resposta do modelo: {reply}")
        print("\n‚úÖ Voc√™ est√° apto a enviar prompts para a aplica√ß√£o!")
    except Exception as e:
        print(f"‚ùå Erro ao enviar prompt: {str(e)}")

def check_api_key():
    api_key = os.getenv("OPENAI_API_KEY")
    
    # Check if API key exists
    if not api_key:
        print("‚ùå API key n√£o encontrada. Configure a vari√°vel de ambiente OPENAI_API_KEY.")
        return False

    print(f"\nüîë Usando API key: {api_key[:4]}...{api_key[-4:] if len(api_key) > 8 else ''}")
    client = openai.OpenAI(api_key=api_key)
    
    try:
        # Check if API key is valid and has permissions
        models = client.models.list()
        print("‚úÖ Chave v√°lida e com permiss√µes corretas.")
        print("\nModelos dispon√≠veis:")
        for model in models.data:
            print("-", model.id)
        
        # Check remaining quota by making a simple completion request
        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": "test"}],
                max_tokens=5
            )
            print("\n‚úÖ Quota dispon√≠vel e funcionando corretamente.")
        except openai.RateLimitError:
            print("\n‚ö†Ô∏è Aviso: Quota excedida ou limite de requisi√ß√µes atingido.")
        except Exception as e:
            print(f"\n‚ö†Ô∏è Aviso: Erro ao verificar quota: {str(e)}")
        
        # Testar envio de prompt
        test_prompt(client)
        return True
        
    except openai.AuthenticationError:
        print("‚ùå Chave inv√°lida ou sem permiss√µes.")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao verificar a API key: {str(e)}")
        print(f"Tipo do erro: {type(e).__name__}")
        if hasattr(e, 'response'):
            print(f"Status code: {e.response.status_code if hasattr(e.response, 'status_code') else 'N/A'}")
            print(f"Response: {e.response.text if hasattr(e.response, 'text') else 'N/A'}")
        return False

if __name__ == "__main__":
    check_api_key()